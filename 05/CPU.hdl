// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // control bits
    Not(in=instruction[15], out=muxC1);  // first mux16 control = not opcode
    
    And(a=instruction[12], b=true, out=muxC2);  // second mux16 control = a

    And(a=instruction[15], b=instruction[3], out=writeM); // writeM control = opcode && d3
    And(a=instruction[4], b=instruction[15], out=DC);     // D control = d2 && opcode
    Or(a=instruction[5], b=muxC1, out=AC);         // A control = d1 || (not opcode)

    // PC load = (j1+j2+j3)[j1*not zr*ng + j2*zr*not ng + j3*not zr*not ng]
    Or(a=instruction[0], b=instruction[1], out=t1);
    Or(a=t1, b=instruction[2], out=r1);

    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);

    And(a=instruction[2], b=notZr, out=t2);
    And(a=t2, b=ng, out=m1);
    And(a=instruction[1], b=zr, out=t3);
    And(a=t3, b=notNg, out=m2);
    And(a=instruction[0], b=notZr, out=t4);
    And(a=t4, b=notNg, out=m3);
    Or(a=m1, b=m2, out=t5);
    Or(a=t5, b=m3, out=r2);

    And(a=r1, b=r2, out=loadtemp);
    And(a=instruction[15], b=loadtemp, out=load);         // A instruction  load = 0

    // connect
    And16(a=ret, b=true, out=outM);
    Mux16(a=ret, b=instruction, sel=muxC1, out=Ain);
    ARegister(in=Ain, load=AC, out=mux2in);
    Mux16(a=mux2in, b=inM, sel=muxC2, out=ALUin2);
    DRegister(in=ret, load=DC, out=ALUin1);
    ALU(x=ALUin1, 
        y=ALUin2, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=ret, 
        zr=zr, 
        ng=ng);

    And16(a=mux2in, b=true, out[0..14]=addressM);

    PC(in=mux2in, load=load, inc=true, reset=reset, out[0..14]=pc);

}